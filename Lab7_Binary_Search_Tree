// Java Program to perform insertion, search, and deletion in a Binary Search Tree

class Node {
    int key;
    Node left, right;

    public Node(int item) {
        key = item;
        left = right = null;
    }
}

class BinarySearchTree {
    Node root;

    // Constructor
    BinarySearchTree() {
        root = null;
    }

    // Insert a new key
    void insert(int key) {
        root = insertRec(root, key);
    }

    // Recursive insert function
    Node insertRec(Node root, int key) {
        // If tree is empty, create a new node
        if (root == null) {
            root = new Node(key);
            return root;
        }

        // Otherwise, recur down the tree
        if (key < root.key)
            root.left = insertRec(root.left, key);
        else if (key > root.key)
            root.right = insertRec(root.right, key);

        // Return the unchanged node pointer
        return root;
    }

    // Search for a key
    boolean search(int key) {
        return searchRec(root, key);
    }

    // Recursive search function
    boolean searchRec(Node root, int key) {
        if (root == null)
            return false;
        if (root.key == key)
            return true;
        if (key < root.key)
            return searchRec(root.left, key);
        else
            return searchRec(root.right, key);
    }

    // Delete a key
    void deleteKey(int key) {
        root = deleteRec(root, key);
    }

    // Recursive delete function
    Node deleteRec(Node root, int key) {
        // Base case
        if (root == null)
            return root;

        // Recur down the tree
        if (key < root.key)
            root.left = deleteRec(root.left, key);
        else if (key > root.key)
            root.right = deleteRec(root.right, key);

        // If key is same as root's key, delete this node
        else {
            // Node with only one child or no child
            if (root.left == null)
                return root.right;
            else if (root.right == null)
                return root.left;

            // Node with two children: Get inorder successor (smallest in right subtree)
            root.key = minValue(root.right);

            // Delete the inorder successor
            root.right = deleteRec(root.right, root.key);
        }

        return root;
    }

    int minValue(Node root) {
        int minv = root.key;
        while (root.left != null) {
            minv = root.left.key;
            root = root.left;
        }
        return minv;
    }

    // Print inorder traversal of the BST
    void inorder() {
        inorderRec(root);
    }

    void inorderRec(Node root) {
        if (root != null) {
            inorderRec(root.left);
            System.out.print(root.key + " ");
            inorderRec(root.right);
        }
    }

    // Driver Code
    public static void main(String[] args) {
        BinarySearchTree bst = new BinarySearchTree();

        // a) Construct and perform insertion
        int[] elements = {50, 30, 70, 20, 40, 60, 80};
        for (int el : elements)
            bst.insert(el);

        System.out.println("Inorder traversal after insertion:");
        bst.inorder();

        // b) Search for a key element
        int keyToSearch = 40;
        System.out.println("\n\nSearching for key " + keyToSearch + ":");
        System.out.println(bst.search(keyToSearch) ? "Key found!" : "Key not found!");

        // c) Delete an element
        int keyToDelete = 30;
        System.out.println("\nDeleting key " + keyToDelete);
        bst.deleteKey(keyToDelete);

        System.out.println("Inorder traversal after deletion:");
        bst.inorder();
    }
}
